//
// Patterns
//
// No sizes, flex to fill
// .gc, .gc--sm, .gc--md, .gc--lg, .gc--xl
//
// Sizes
// .gc--sm--1, .gc--sm--2, .gc--sm--3, etc.
// .gc--md--1, .gc--md--2, .gc--md--3, etc.
// etc.
//

$grid-col-gap-sm: $gutter-min * 1rem;
$grid-col-gap-lg: $gutter-max * 1rem;

.g {
  $margin-sm: -($grid-col-gap-sm * 0.5);
  $margin-lg: -($grid-col-gap-lg * 0.5);
  $padding-sm: $grid-col-gap-sm * 0.5;
  $padding-lg: $grid-col-gap-lg * 0.5;
  // Row settings
  display: flex;
  align-items: stretch;
  justify-content: start;
  flex-wrap: wrap;
  
  margin-inline-start: $margin-sm;
  margin-inline-end: $margin-sm;

  @include breakpoint-up(large) {
    margin-inline-start: $margin-lg;
    margin-inline-end: $margin-lg;
  }

  // All nested columns
  //> [class^="gc"] 
  > * {
    min-height: 1px;
    padding-inline-start: $padding-sm;
    padding-inline-end: $padding-sm;
    padding-bottom: ($grid-col-gap-sm * 2);
    width: 100%;

    @include breakpoint-up(large) {
      padding-inline-start: $padding-lg;
      padding-inline-end: $padding-lg;
      padding-bottom: ($grid-col-gap-lg * 2);
    }
  }

  // Columns without a width. Flex makes them all fill whatever is available
  #{&}c {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  #{&}c--sm {
    @include breakpoint-up(small) {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }
  }

  #{&}c--md {
    @include breakpoint-up(medium) {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }
  }

  #{&}c--lg {
    @include breakpoint-up(large) {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }
  }

  #{&}c--xl {
    @include breakpoint-up(x-large) {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }
  }

  @each $short, $bp in $breakpoint-list {
    @if $bp != none {
      @include breakpoint-up($bp) {
        @for $i from 1 through 12 {
          #{&}c#{$short}--#{$i} {
            flex: 0 0 #{math.div($i, 12) * 100%};
          }
          #{&}c__push#{$short}--#{$i} {
            margin-inline-start: #{math.div($i, 12) * 100%};
          }
          #{&}c__pull#{$short}--#{$i} {
            margin-inline-end: #{math.div($i, 12) * 100%};
          }
        }
      }
    } @else {
      @for $i from 1 through 12 {
        #{&}c--#{$i} {
          flex: 0 0 #{math.div($i, 12) * 100%};
        }
        #{&}c__push--#{$i} {
          margin-inline-start: #{math.div($i, 12) * 100%};
        }
        #{&}c__pull--#{$i} {
          margin-inline-end: #{math.div($i, 12) * 100%};
        }
      }
    }
  }
}

// Flex utilities
// Horizontal (inline) direction
.justify-content--center {
  justify-content: center;
}

// Vertical (block) direction
.align-items--end {
  align-items: end
}